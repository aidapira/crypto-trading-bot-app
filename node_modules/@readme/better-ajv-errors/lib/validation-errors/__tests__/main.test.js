"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ajv = _interopRequireDefault(require("ajv"));

var _ = _interopRequireDefault(require("../.."));

var _testHelpers = require("../../test-helpers");

describe('Main', function () {
  it('should support js output format for default errors', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var _yield$getSchemaAndDa, _yield$getSchemaAndDa2, schema, data, ajv, validate, valid, res;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _testHelpers.getSchemaAndData)('default', __dirname);

          case 2:
            _yield$getSchemaAndDa = _context.sent;
            _yield$getSchemaAndDa2 = (0, _slicedToArray2["default"])(_yield$getSchemaAndDa, 2);
            schema = _yield$getSchemaAndDa2[0];
            data = _yield$getSchemaAndDa2[1];
            ajv = new _ajv["default"]();
            validate = ajv.compile(schema);
            valid = validate(data);
            expect(valid).toBe(false);
            res = (0, _["default"])(schema, data, validate.errors, {
              format: 'js'
            });
            expect(res).toMatchSnapshot();

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should support js output format for required errors', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var _yield$getSchemaAndDa3, _yield$getSchemaAndDa4, schema, data, ajv, validate, valid, res;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _testHelpers.getSchemaAndData)('required', __dirname);

          case 2:
            _yield$getSchemaAndDa3 = _context2.sent;
            _yield$getSchemaAndDa4 = (0, _slicedToArray2["default"])(_yield$getSchemaAndDa3, 2);
            schema = _yield$getSchemaAndDa4[0];
            data = _yield$getSchemaAndDa4[1];
            ajv = new _ajv["default"]();
            validate = ajv.compile(schema);
            valid = validate(data);
            expect(valid).toBe(false);
            res = (0, _["default"])(schema, data, validate.errors, {
              format: 'js'
            });
            expect(res).toMatchSnapshot();

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should support js output format for additionalProperties errors', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var _yield$getSchemaAndDa5, _yield$getSchemaAndDa6, schema, data, ajv, validate, valid, res;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _testHelpers.getSchemaAndData)('additionalProperties', __dirname);

          case 2:
            _yield$getSchemaAndDa5 = _context3.sent;
            _yield$getSchemaAndDa6 = (0, _slicedToArray2["default"])(_yield$getSchemaAndDa5, 2);
            schema = _yield$getSchemaAndDa6[0];
            data = _yield$getSchemaAndDa6[1];
            ajv = new _ajv["default"]();
            validate = ajv.compile(schema);
            valid = validate(data);
            expect(valid).toBe(false);
            res = (0, _["default"])(schema, data, validate.errors, {
              format: 'js'
            });
            expect(res).toMatchSnapshot();

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should support js output format for enum errors', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
    var _yield$getSchemaAndDa7, _yield$getSchemaAndDa8, schema, data, ajv, validate, valid, res;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return (0, _testHelpers.getSchemaAndData)('enum', __dirname);

          case 2:
            _yield$getSchemaAndDa7 = _context4.sent;
            _yield$getSchemaAndDa8 = (0, _slicedToArray2["default"])(_yield$getSchemaAndDa7, 2);
            schema = _yield$getSchemaAndDa8[0];
            data = _yield$getSchemaAndDa8[1];
            ajv = new _ajv["default"]();
            validate = ajv.compile(schema);
            valid = validate(data);
            expect(valid).toBe(false);
            res = (0, _["default"])(schema, data, validate.errors, {
              format: 'js'
            });
            expect(res).toMatchSnapshot();

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
});