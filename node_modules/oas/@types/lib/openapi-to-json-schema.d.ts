export = toJSONSchema;
/**
 * Given an OpenAPI-flavored JSON Schema, make an effort to modify it so it's shaped more towards stock JSON Schema.
 *
 * Why do this?
 *
 *  1. OpenAPI 3.0.x supports its own flavor of JSON Schema that isn't fully compatible with most JSON Schema tooling
 *    (like `@readme/oas-form` or `@rjsf/core`).
 *  2. While validating an OpenAPI definition will prevent corrupted or improper schemas from occuring, we have a lot of
 *    legacy schemas in ReadMe that were ingested before we had proper validation in place, and as a result have some
 *    API definitions that will not pass validation right now. In addition to reshaping OAS-JSON Schema into JSON Schema
 *    this library will also fix these improper schemas: things like `type: object` having `items` instead of
 *    `properties`, `type: array` missing `items`, or `type` missing completely on a schema.
 *  3. Additionally due to OpenAPI 3.0.x not supporting JSON Schema, in order to support the `example` keyword that OAS
 *    supports, we need to do some work in here to remap it into `examples`. However, since all we care about in respect
 *    to examples for usage within `@readme/oas-form`, we're only retaining primitives. This *slightly* deviates from
 *    JSON Schema in that JSON Schema allows for any schema to be an example, but since `@readme/oas-form` can only
 *    actually **render** primitives, that's what we're retaining.
 *  4. Though OpenAPI 3.1 does support full JSON Schema, this library should be able to handle it without any problems.
 *
 * And why use this over `@openapi-contrib/openapi-schema-to-json-schema`? Fortunately and unfortunately we've got a lot
 * of API definitions in our database that aren't currently valid so we need to have a lot of bespoke handling for odd
 * quirks, typos, and missing declarations that they've got.
 *
 * @see {@link https://json-schema.org/draft/2019-09/json-schema-validation.html{}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md}
 * @param {Object} data
 * @param {Object} opts
 * @param {String} opts.currentLocation - Current location within the schema -- this is a JSON pointer.
 * @param {Object} opts.globalDefaults - Object containing a global set of defaults that we should apply to schemas that match it.
 * @param {Boolean} opts.isPolymorphicAllOfChild - Is this schema the child of a polymorphic `allOf` schema?
 * @param {Object[]} opts.prevSchemas - Array of parent schemas to utilize when attempting to path together examples.
 * @param {Function} opts.refLogger - A function that's called anytime a (circular) `$ref` is found.
 */
declare function toJSONSchema(data: Object, opts?: {
    currentLocation: string;
    globalDefaults: Object;
    isPolymorphicAllOfChild: boolean;
    prevSchemas: Object[];
    refLogger: Function;
}): {
    constructor: Function;
    toString(): string;
    toLocaleString(): string;
    valueOf(): Object;
    hasOwnProperty(v: PropertyKey): boolean;
    isPrototypeOf(v: Object): boolean;
    propertyIsEnumerable(v: PropertyKey): boolean;
} | {
    $ref: any;
};
