import type * as RMOAS from './rmoas.types';
import type { OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';
import type { RequestBodyExamples } from './operation/get-requestbody-examples';
import type { CallbackExamples } from './operation/get-callback-examples';
import type { ResponseExamples } from './operation/get-response-examples';
import Oas from '.';
declare type SecurityType = 'Basic' | 'Bearer' | 'Query' | 'Header' | 'Cookie' | 'OAuth2' | 'http' | 'apiKey';
export default class Operation {
    /**
     * Schema of the operation from the API Definiton.
     */
    schema: RMOAS.OperationObject;
    /**
     * OpenAPI API Definition that this operation originated from.
     */
    api: RMOAS.OASDocument;
    /**
     * Path that this operation is targeted towards.
     */
    path: string;
    /**
     * HTTP Method that this operation is targeted towards.
     */
    method: RMOAS.HttpMethods;
    /**
     * The primary Content Type that this operation accepts.
     */
    contentType: string;
    /**
     * Request body examples for this operation.
     */
    requestBodyExamples: RequestBodyExamples;
    /**
     * Response examples for this operation.
     */
    responseExamples: ResponseExamples;
    /**
     * Callback examples for this operation (if it has callbacks).
     */
    callbackExamples: CallbackExamples;
    /**
     * Flattened out arrays of both request and response headers that are utilized on this operation.
     */
    headers: {
        request: Array<string>;
        response: Array<string>;
    };
    constructor(api: Oas | RMOAS.OASDocument, path: string, method: RMOAS.HttpMethods, operation: RMOAS.OperationObject);
    getContentType(): string;
    isFormUrlEncoded(): boolean;
    isMultipart(): boolean;
    isJson(): boolean;
    isXml(): boolean;
    /**
     * Returns an array of all security requirements associated wtih this operation. If none are defined at the operation
     * level, the securities for the entire API definition are returned (with an empty array as a final fallback).
     *
     * @returns Array of security requirement objects.
     */
    getSecurity(): OpenAPIV3.SecurityRequirementObject[];
    /**
     * @see {@link https://swagger.io/docs/specification/authentication/#multiple}
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#security-requirement-object}
     * @param filterInvalid Optional flag that, when set to `true`, filters out invalid/nonexistent security schemes,
     *    rather than returning `false`.
     * @returns An array of arrays of objects of grouped security schemes. The inner array determines and-grouped
     *    security schemes, the outer array determines or-groups.
     */
    getSecurityWithTypes(filterInvalid?: boolean): (false | (false | {
        type: SecurityType;
        security: ({
            _key: string;
            'x-default'?: string | number;
        } & OpenAPIV3.HttpSecurityScheme) | ({
            _key: string;
            'x-default'?: string | number;
        } & OpenAPIV3.ApiKeySecurityScheme) | ({
            _key: string;
            'x-default'?: string | number;
        } & OpenAPIV3.OAuth2SecurityScheme);
    })[])[];
    /**
     * @returns An object where the keys are unique scheme types, and the values are arrays containing each security
     *    scheme of that type.
     */
    prepareSecurity(): Record<SecurityType, RMOAS.KeyedSecuritySchemeObject[]>;
    getHeaders(): {
        request: string[];
        response: string[];
    };
    /**
     * @returns If the operation has an `operationId` present in its schema.
     */
    hasOperationId(): boolean;
    /**
     * Retrieve an operation ID for this operation. If one is not present (it's not required by the spec!) a hash of the
     * path and method will be returned instead.
     *
     * @returns The found or generated operation ID.
     */
    getOperationId(): string;
    /**
     * @returns An array of all tags, and their metadata, that exist on this operation.
     */
    getTags(): OpenAPIV3.TagObject[];
    /**
     * @returns If the operation is flagged as `deprecated` or not.
     */
    isDeprecated(): boolean;
    /**
     * @todo This should also pull in common params.
     * @returns The parameters (non-request body) on the operation.
     */
    getParameters(): OpenAPIV3.ParameterObject[];
    /**
     * Convert the operation into an array of JSON Schema for each available type of parameter available on the operation.
     * `globalDefaults` contains an object of user defined parameter defaults used.
     *
     * @param globalDefaults An object of global defaults to apply as a `default` in the returned JSON Schema.
     * @returns An array of JSON Schema objects.
     */
    getParametersAsJsonSchema(globalDefaults?: unknown): any;
    /**
     * Get a single response for this status code, formatted as JSON schema.
     *
     * @param statusCode Status code to pull a JSON Schema object for.
     * @returns A JSON Schema object for the specified response.
     */
    getResponseAsJsonSchema(statusCode: string): {
        type: any;
        schema: any;
        label: string;
    }[];
    /**
     * @returns An array of all valid response status codes for this operation.
     */
    getResponseStatusCodes(): string[];
    /**
     * @returns If the operation has a request body.
     */
    hasRequestBody(): boolean;
    /**
     * @returns An array of request body examples that this operation has.
     */
    getRequestBodyExamples(): RequestBodyExamples;
    /**
     * @param statusCode HTTP status code to get.
     * @returns A specific response out of the operation by a given HTTP status code.
     */
    getResponseByStatusCode(statusCode: string | number): false | OpenAPIV3.ResponseObject | OpenAPIV3_1.ResponseObject;
    /**
     * @returns An array of response examples that this operation has.
     */
    getResponseExamples(): ResponseExamples;
    /**
     * @returns If the operation has callbacks.
     */
    hasCallbacks(): boolean;
    /**
     * Retrieve a specific callback.
     *
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#callbackObject}
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#callbackObject}
     * @param identifier Callback identifier to look for.
     * @param expression Callback expression to look for.
     * @param method HTTP Method on the callback to look for.
     * @returns The found callback.
     */
    getCallback(identifier: string, expression: string, method: RMOAS.HttpMethods): false | Callback;
    /**
     * @returns An array of operations created from each callback.
     */
    getCallbacks(): false | (false | Callback)[];
    /**
     * @returns An array of callback examples that this operation has.
     */
    getCallbackExamples(): CallbackExamples;
    /**
     * Determine if a given a custom specification extension exists within the operation.
     *
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions}
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#specificationExtensions}
     * @param extension Specification extension to lookup.
     * @returns The extension exists.
     */
    hasExtension(extension: string): boolean;
    /**
     * Retrieve a custom specification extension off of the operation.
     *
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions}
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#specificationExtensions}
     * @param extension Specification extension to lookup.
     * @returns The extension contents if it was found.
     */
    getExtension(extension: string): unknown;
}
export declare class Callback extends Operation {
    identifier: string;
    constructor(api: RMOAS.OASDocument, path: string, method: RMOAS.HttpMethods, operation: RMOAS.OperationObject, identifier: string);
    /**
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#callback-object}
     * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#callbackObject}
     * @returns The primary identifier for this callback.
     */
    getIdentifier(): string;
}
export declare class Webhook extends Operation {
}
export {};
